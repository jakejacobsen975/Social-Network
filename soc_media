#!/usr/bin/env python3
import sqlite3
import sys
import pyfiglet

def UserExists(user):
    c.execute("SELECT username FROM users")
    nameList = c.fetchall()
    for i in range(len(nameList)):
        inListName = nameList[i]
        if user == inListName[0]:
            return True
    return False

def followingExists(followName):
    file = open('text.txt')
    usrID = file.readline()
    file.close()
    followingQuery = """
    SELECT id, username, user_id, following_id
    FROM users
    JOIN follows
    ON id = user_id
    WHERE following_id = (?)
    """
    c.execute(followingQuery, [usrID])
    followingNames = c.fetchall()
    
    for i in range(len(followingNames)):
        if followName == followingNames[0][1]:
            print("Following already exists")
            return True
    return False
        

conn = sqlite3.connect('social_media.db')
c = conn.cursor()

if sys.argv[1] == 'interact':
    ascii_banner = pyfiglet.figlet_format("Welcome")
    print(ascii_banner)
    print('''Create acount with create command followed by your information
example create johndoe johndoe@gmail.com

Or login in with the login command with username
example login john_doe
    '''
    )
elif sys.argv[1] == 'create':
    c.execute("SELECT count(1) FROM users")
    count = c.fetchall()
    count = count[0][0]
    c.execute("INSERT INTO users VALUES (?,?,?)", (count+1,sys.argv[2],sys.argv[3]))
elif sys.argv[1] == 'login':
    usrName = input("Please enter your username: ")
    isUser = UserExists(usrName)
    if isUser is False:
        print("Could not find user. Please try new name or create an account.")
        sys.exit()
    c.execute("SELECT id FROM users WHERE username = (?)", [usrName])
    id = c.fetchall()
    id = id[0][0]
    file1 = open('text.txt','w')
    file1.write(str(id))
    file1.close()
    # file1.write(sys.argv[2])
    # c.execute("SELECT username FROM users where id == "+str(sys.argv[2]))
    # c.execute("SELECT username FROM users where id == "+ str(id))
    # pep = c.fetchall()
    # pep = pep[0][0]
    # print(pyfiglet.figlet_format("Hello\n" + str(pep)))
    print(pyfiglet.figlet_format("Hello\n" + usrName))
    print("""You can follow, post, comment or look at your feed
Examples:
        follow john_done
        post this is my post
        feed 
        comment this is my comment id id(first id is the post and second is the comment)
    """)
elif sys.argv[1] == 'follow':
    file = open('text.txt')
    usrID = file.readline()
    userQuery = """
    SELECT username FROM users
    WHERE id = (?)
    """
    c.execute(userQuery, [usrID])
    thisName = c.fetchall()
    currentUser = thisName[0][0]
    print(f"Current user: {currentUser}")
    
    notFollowingQuery = """
    SELECT id, username, user_id, following_id
    FROM users
    JOIN follows
    ON id = following_id
    ORDER BY id ASC
    """
    c.execute(notFollowingQuery)#,(usrID, currentUser))
    Names = c.fetchall()
    print(Names)
    isSecond = False
    nameList = ""
    # Display list of Names as options to follow
    for i in range(0, len(Names)):
        name = Names[i]
        if isSecond == False:
            nameList += "{0}".format(name[1])
            for j in range(len(name[1]), 25):
                nameList += " "
            isSecond = True
        else:
            nameList += "{}\n".format(name[1])
            isSecond = False
    print(nameList)

    isValid = False
    while isValid is False:
        who = input("Please type the name of the person you want to follow: ")
        if UserExists(who) is True and followingExists(who) is False:
            isValid = True
        else:
            print("Please pick a valid name from the list.")
    
    c.execute("SELECT id FROM users WHERE username = (?)", [who])
    id = c.fetchall()
    id = id[0][0]
    
    file = open('text.txt')
    usrID = file.readline()
    
    
    c.execute("INSERT INTO follows (user_id, following_id) VALUES (?,?)", (id, usrID))
elif sys.argv[1] == 'post':
    c.execute("SELECT COUNT(*) FROM posts")
    count = c.fetchall()
    count = count[0][0]
    
    file = open('text.txt')
    usrID = file.readline()
    file.close()

    content = input("What would you like to post?:\n")
    c.execute("INSERT INTO posts (id, user_id, content) VALUES (?,?,?,?)", (count+1, usrID, content))
elif sys.argv[1] == 'feed':
    file1 = open('text.txt')
    id = file1.readline()
    c.execute("SELECT user_id FROM follows where following_id =="+str(id))
    count = c.fetchall()
    print(count)
    follows = []
    for follow in count:
        follows.append(follow[0])
    for f in follows:
        c.execute("SELECT id,content FROM posts where user_id =="+str(f))
        pep = c.fetchall()
        for post in pep:
            print(str(post[0])+" "+post[1])
            post_id = post[0] 
            recursive_query = """
            WITH RECURSIVE comment_tree(id, post_id, user_id, content, created_at, parent_id, depth) AS (
            -- Base case: select top-level comments
            SELECT id, post_id, user_id, content, created_at, parent_id, 0
            FROM comments
            WHERE post_id = ? AND parent_id = 0
            
            UNION ALL
            
            -- Recursive case: select nested comments
            SELECT c.id, c.post_id, c.user_id, c.content, c.created_at, c.parent_id, ct.depth + 1
            FROM comments c
            JOIN comment_tree ct ON c.parent_id = ct.id
            )
            SELECT id, content, depth
            FROM comment_tree
            ORDER BY parent_id asc
            """


            # Execute the recursive query with the post_id parameter
            c.execute(recursive_query, (post_id,))

            # Fetch the results
            results = c.fetchall()
            
            # Print the results
            for row in results:
                printer = '   '
                printer += ' ' * row[2]*3
                print(printer+str(row[0])+" "+row[1])
            
elif sys.argv[1] == 'comment':
    
    file1 = open('text.txt')
    id = file1.readline()
    c.execute("SELECT count(1) FROM comments")
    count = c.fetchall()
    count = count[0][0]
    comment_id = count+1
    post_id = sys.argv[3]
    user_id = id
    content = sys.argv[2]
    
    try:
        parent_id = sys.argv[4]
        c.execute("INSERT INTO comments (id, post_id, user_id, content, parent_id) VALUES (?,?,?,?,?)", (comment_id,post_id,user_id,content,parent_id))
    except:
        c.execute("INSERT INTO comments (id, post_id, user_id, content) VALUES (?,?,?,?)", (comment_id,post_id,user_id,content))
elif sys.argv[1] == 'test':
    file1 = open('text.txt')
    id = file1.readline()
    recursive_query = """
   WITH RECURSIVE following(user_id, level) AS (
    -- Initial level: users followed by the given user
    SELECT user_id, 1
    FROM follows
    WHERE following_id = ?
    
    UNION ALL
    
    -- Subsequent levels: users that are followed by followed users
    SELECT f.user_id, level + 1
    FROM follows f
    JOIN following ON following.user_id = f.following_id
    WHERE level < 1
)
SELECT username
FROM users
WHERE id NOT IN (SELECT user_id FROM following) and id <> ?
ORDER BY username;
            """


            # Execute the recursive query with the post_id parameter
    c.execute(recursive_query, (id,id,))
    
    count = c.fetchall()
   
    print(count)
else:
    print('That is not command')
conn.commit()

