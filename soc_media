#!/usr/bin/env python3
import sqlite3
import sys
import pyfiglet
conn = sqlite3.connect('social_media.db')
c = conn.cursor()

if sys.argv[1] == 'interact':
    ascii_banner = pyfiglet.figlet_format("Welcome")
    print(ascii_banner)
    print('''Create acount with create command followed by your information
example create johndoe johndoe@gmail.com

Or login in with the login command with id
example login 1 
    '''
    )
elif sys.argv[1] == 'create':
    c.execute("SELECT count(1) FROM users")
    count = c.fetchall()
    count = count[0][0]
    c.execute("INSERT INTO users VALUES (?,?,?)", (count+1,sys.argv[2],sys.argv[3]))
elif sys.argv[1] == 'login':
    file1 = open('text.txt','w')
    file1.write(sys.argv[2])
    c.execute("SELECT username FROM users where id == "+str(sys.argv[2]))
    pep = c.fetchall()
    pep = pep[0][0]
    print(pyfiglet.figlet_format("Hello\n" + str(pep)))
    print("""You can follow, post, comment or look at your feed
Examples:
        follow john_done
        post this is my post
        feed 
        comment this is my comment id id(first id is the post and second is the comment)
    """)
elif sys.argv[1] == 'follow':
    c.execute("SELECT username FROM users")
    names = c.fetchall()
    print(names)
elif sys.argv[1] == 'post':
    pass
elif sys.argv[1] == 'feed':
    file1 = open('text.txt')
    id = file1.readline()
    c.execute("SELECT following_id FROM follows where user_id =="+str(id))
    count = c.fetchall()
    follows = []
    for follow in count:
        follows.append(follow[0])
    for f in follows:
        c.execute("SELECT id,content FROM posts where user_id =="+str(f))
        pep = c.fetchall()
        for post in pep:
            print(str(post[0])+" "+post[1])
            post_id = post[0] 
            recursive_query = """
            WITH RECURSIVE comment_tree(id, post_id, user_id, content, created_at, parent_id, depth) AS (
            -- Base case: select top-level comments
            SELECT id, post_id, user_id, content, created_at, parent_id, 0
            FROM comments
            WHERE post_id = ? AND parent_id IS NULL
            
            UNION ALL
            
            -- Recursive case: select nested comments
            SELECT c.id, c.post_id, c.user_id, c.content, c.created_at, c.parent_id, ct.depth + 1
            FROM comments c
            JOIN comment_tree ct ON c.parent_id = ct.id
            )
            SELECT id, content, depth
            FROM comment_tree
            ORDER BY created_at ASC
            """


            # Execute the recursive query with the post_id parameter
            c.execute(recursive_query, (post_id,))

            # Fetch the results
            results = c.fetchall()
            
            # Print the results
            for row in results:
                printer = '   '
                printer += ' ' * row[2]*3
                print(printer+str(row[0])+" "+row[1])
               
elif sys.argv[1] == 'comment':
    
    file1 = open('text.txt')
    id = file1.readline()
    c.execute("SELECT count(1) FROM comments")
    count = c.fetchall()
    count = count[0][0]
    comment_id = count+1
    post_id = sys.argv[3]
    user_id = id
    content = sys.argv[2]
    
    try:
        parent_id = sys.argv[4]
        c.execute("INSERT INTO comments (id, post_id, user_id, content, parent_id) VALUES (?,?,?,?,?)", (comment_id,post_id,user_id,content,parent_id))
    except:
        c.execute("INSERT INTO comments (id, post_id, user_id, content) VALUES (?,?,?,?)", (comment_id,post_id,user_id,content))
    
else:
    print('That is not command')
conn.commit()

